<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\robotathon2010\RobzDemo\RobzDemo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\robotathon2010\RobzDemo\RobzDemo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Thu Sep 30 17:45:45 2010
<BR><P>
<H3>Maximum Stack Usage =        216 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; uartDemo &rArr; putc &rArr; UARTprintf &rArr; UARTwrite
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b2fd28]">Reset_Handler</a>
 <LI><a href="#[b2ff08]">NmiSR</a>
 <LI><a href="#[b2fecc]">FaultISR</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2dd84]">$C$L2</a>
 <LI><a href="#[b2dd48]">$C$L3</a>
 <LI><a href="#[b2dd0c]">$C$L4</a>
 <LI><a href="#[b2c470]">$C$DW$L$LockoutProtection$4$B</a>
 <LI><a href="#[b2c3bc]">$C$DW$L$LockoutProtection$4$E</a>
 <LI><a href="#[b2ba5c]">$C$L3</a>
 <LI><a href="#[b2ba20]">$C$L4</a>
 <LI><a href="#[b2b9e4]">$C$L5</a>
 <LI><a href="#[b2b9a8]">$C$L6</a>
 <LI><a href="#[b2b96c]">$C$L7</a>
 <LI><a href="#[b2b930]">$C$L8</a>
 <LI><a href="#[b2b8f4]">$C$L9</a>
 <LI><a href="#[b2b8b8]">$C$L10</a>
 <LI><a href="#[b2b87c]">$C$L11</a>
 <LI><a href="#[b2b840]">$C$L12</a>
 <LI><a href="#[b2b804]">$C$L13</a>
 <LI><a href="#[b2b7c8]">$C$L14</a>
 <LI><a href="#[b2b78c]">$C$L15</a>
 <LI><a href="#[b2b750]">$C$L16</a>
 <LI><a href="#[b2b714]">$C$L17</a>
 <LI><a href="#[b2b6d8]">$C$L18</a>
 <LI><a href="#[b2b69c]">$C$L19</a>
 <LI><a href="#[13e6ac8]">$C$L1</a>
 <LI><a href="#[13e6a8c]">$C$DW$L$WaitUS$7$B</a>
 <LI><a href="#[13e69d8]">$C$DW$L$WaitUS$7$E</a>
 <LI><a href="#[13e699c]">$C$DW$L$WaitUS$8$E</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[13eb85c]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13eb85c]">SysCtlDelay</a><BR>
 <LI><a href="#[b30214]">UARTCharPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b30214]">UARTCharPut</a><BR>
 <LI><a href="#[b30250]">UARTCharGet</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b30250]">UARTCharGet</a><BR>
 <LI><a href="#[b301d8]">UARTConfigSetExpClk</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b301d8]">UARTConfigSetExpClk</a><BR>
 <LI><a href="#[b2ff08]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b2ff08]">NmiSR</a><BR>
 <LI><a href="#[b2fecc]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b2fecc]">FaultISR</a><BR>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b2fe90]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b2fd28]">Reset_Handler</a>
 <LI><a href="#[b2ff08]">NmiSR</a>
 <LI><a href="#[b2fecc]">FaultISR</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fcb0]">EncoderInterruptHandler</a>
 <LI><a href="#[b2fcb0]">EncoderInterruptHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fc74]">LSIntHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2fe90]">IntDefaultHandler</a>
 <LI><a href="#[b2f74c]">main</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b2fd28]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[147fcfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[147fcfc]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b2fd28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[147f9b4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[147f888]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[147f630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[147f84c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[147f630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[147f75c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[13eb85c]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[13eb85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b2bde0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[13eb85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[13e603c]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[13e6000]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[13e5fc4]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[b2cac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[13eaf74]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[b33130]"></a>initUART</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uartdemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = initUART &rArr; UARTStdioInit &rArr; UARTStdioInitExpClk &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[b32f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioInit
<LI><a href="#[b32fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[b33004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b330f4]"></a>putc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uartdemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = putc &rArr; UARTprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b32e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b328fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorDemo
<LI><a href="#[b3307c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDemo
</UL>

<P><STRONG><a name="[b330b8]"></a>getc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uartdemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getc &rArr; UARTgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[b32f14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b323d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servoDemo
<LI><a href="#[b328fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorDemo
<LI><a href="#[b3307c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDemo
</UL>

<P><STRONG><a name="[b3307c]"></a>uartDemo</STRONG> (Thumb, 62 bytes, Stack size 112 bytes, uartdemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = uartDemo &rArr; putc &rArr; UARTprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b32e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[b32ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTgets
<LI><a href="#[b330b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[b330f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b33040]"></a>keyWasPressed</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uartdemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = keyWasPressed
</UL>
<BR>[Calls]<UL><LI><a href="#[b32f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
</UL>
<BR>[Called By]<UL><LI><a href="#[b30e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoderDemo
<LI><a href="#[b31498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRSensorDemo
<LI><a href="#[b319fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineSensorDemo
</UL>

<P><STRONG><a name="[b32938]"></a>initMotors</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, motordemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = initMotors &rArr; InitializeMotors &rArr; SetMotorPowers
</UL>
<BR>[Calls]<UL><LI><a href="#[b328c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeMotors
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b328fc]"></a>motorDemo</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, motordemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = motorDemo &rArr; putc &rArr; UARTprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b32884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorPowers
<LI><a href="#[b32e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[b330b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[b330f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b32410]"></a>initServo</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, servodemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = initServo &rArr; InitializeServos &rArr; GPIOPinTypePWM
</UL>
<BR>[Calls]<UL><LI><a href="#[b32398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeServos
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b323d4]"></a>servoDemo</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, servodemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = servoDemo &rArr; UARTprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b3235c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServoPosition
<LI><a href="#[b32e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[b330b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b31a38]"></a>initLineSensor</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, linesensordemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = initLineSensor &rArr; InitializeLineSensor &rArr; GPIOPinTypeGPIOInput
</UL>
<BR>[Calls]<UL><LI><a href="#[b319c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeLineSensor
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b319fc]"></a>lineSensorDemo</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, linesensordemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = lineSensorDemo &rArr; ReadLineSensor &rArr; StartChargingLS &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[b31984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLineSensor
<LI><a href="#[b32e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[b33040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyWasPressed
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b31510]"></a>initIRSensor</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, irsensordemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = initIRSensor &rArr; ADCSequenceStepConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[b31330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceStepConfigure
<LI><a href="#[b3136c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceEnable
<LI><a href="#[b313e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceConfigure
<LI><a href="#[b32fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b314d4]"></a>getADCValue</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, irsensordemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getADCValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b313a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceDataGet
<LI><a href="#[b31420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCProcessorTrigger
<LI><a href="#[b3145c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b31498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRSensorDemo
</UL>

<P><STRONG><a name="[b31498]"></a>IRSensorDemo</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, irsensordemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IRSensorDemo &rArr; UARTprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b314d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getADCValue
<LI><a href="#[b32e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[b33040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyWasPressed
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b30ebc]"></a>initEncoders</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, encoderdemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = initEncoders &rArr; InitializeEncoders &rArr; GPIOPinTypeGPIOInput
</UL>
<BR>[Calls]<UL><LI><a href="#[b30dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeEncoders
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b30e80]"></a>encoderDemo</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, encoderdemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = encoderDemo &rArr; UARTprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b30d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PresetEncoderCounts
<LI><a href="#[b30e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncoderCounts
<LI><a href="#[b30e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncoderCount
<LI><a href="#[b32e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[b33040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyWasPressed
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b30340]"></a>UARTStdioInitExpClk</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uartstdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTStdioInitExpClk &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[b3019c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEnable
<LI><a href="#[b301d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[b3028c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralPresent
<LI><a href="#[b302c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[b32fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b32f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioInit
</UL>

<P><STRONG><a name="[b32f50]"></a>UARTStdioInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uartstdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTStdioInit &rArr; UARTStdioInitExpClk &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[b30340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioInitExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[b33130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART
</UL>

<P><STRONG><a name="[b30304]"></a>UARTwrite</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uartstdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b30214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[b32e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[b32ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTgets
</UL>

<P><STRONG><a name="[b32ed8]"></a>UARTgets</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, uartstdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UARTgets &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b30214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[b30250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGet
<LI><a href="#[b30304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b3307c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDemo
</UL>

<P><STRONG><a name="[b32f14]"></a>UARTgetc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uartstdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[b30250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b330b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[b32e9c]"></a>UARTprintf</STRONG> (Thumb, 588 bytes, Stack size 72 bytes, uartstdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UARTprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b30304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b30e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoderDemo
<LI><a href="#[b31498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRSensorDemo
<LI><a href="#[b319fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineSensorDemo
<LI><a href="#[b323d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servoDemo
<LI><a href="#[b328fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorDemo
<LI><a href="#[b3307c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDemo
<LI><a href="#[b330f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>

<P><STRONG><a name="[b2f74c]"></a>main</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, robzdemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = main &rArr; uartDemo &rArr; putc &rArr; UARTprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b2f6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockoutProtection
<LI><a href="#[b2f710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeMCU
<LI><a href="#[b30e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoderDemo
<LI><a href="#[b30ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEncoders
<LI><a href="#[b31498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRSensorDemo
<LI><a href="#[b31510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initIRSensor
<LI><a href="#[b319fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineSensorDemo
<LI><a href="#[b31a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLineSensor
<LI><a href="#[b323d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servoDemo
<LI><a href="#[b32410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initServo
<LI><a href="#[b328fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorDemo
<LI><a href="#[b32938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMotors
<LI><a href="#[b32e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[b3307c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDemo
<LI><a href="#[b330b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[b330f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[b33130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[147f630]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[147f84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[147f888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[147f5f4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b2fcb0]"></a>EncoderInterruptHandler</STRONG> (Thumb, 0 bytes, Stack size 160 bytes, encoder.obj(.text:EncoderInterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = EncoderInterruptHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b2a7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntStatus
<LI><a href="#[b2b69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L19
<LI><a href="#[b2b7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L14
<LI><a href="#[b2b804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L13
<LI><a href="#[b2b840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L12
<LI><a href="#[b2b87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L11
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b30e44]"></a>GetEncoderCount</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, encoder.obj(.text:GetEncoderCount))
<BR><BR>[Calls]<UL><LI><a href="#[b2b8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L9
<LI><a href="#[b2b930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L8
<LI><a href="#[b2b96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L7
</UL>
<BR>[Called By]<UL><LI><a href="#[b30e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoderDemo
</UL>

<P><STRONG><a name="[b30e08]"></a>GetEncoderCounts</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, encoder.obj(.text:GetEncoderCounts))
<BR><BR>[Called By]<UL><LI><a href="#[b30e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoderDemo
</UL>

<P><STRONG><a name="[b30dcc]"></a>InitializeEncoders</STRONG> (Thumb, 0 bytes, Stack size 96 bytes, encoder.obj(.text:InitializeEncoders))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = InitializeEncoders &rArr; GPIOPinTypeGPIOInput
</UL>
<BR>[Calls]<UL><LI><a href="#[b2a88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntEnable
<LI><a href="#[b2a8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
<LI><a href="#[b2ba20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L4
<LI><a href="#[b2ba5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L3
<LI><a href="#[b2c830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[b2cb00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[b32fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b30ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEncoders
</UL>

<P><STRONG><a name="[b319c0]"></a>InitializeLineSensor</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, linesensor.obj(.text:InitializeLineSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = InitializeLineSensor &rArr; GPIOPinTypeGPIOInput
</UL>
<BR>[Calls]<UL><LI><a href="#[b2cb00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[b32fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b31a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLineSensor
</UL>

<P><STRONG><a name="[b2f710]"></a>InitializeMCU</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, init.obj(.text:InitializeMCU))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitializeMCU &rArr; SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b2bda4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPWMClockSet
<LI><a href="#[b2bde0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[b2cac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[b302c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b328c0]"></a>InitializeMotors</STRONG> (Thumb, 0 bytes, Stack size 128 bytes, motor.obj(.text:InitializeMotors))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = InitializeMotors &rArr; SetMotorPowers
</UL>
<BR>[Calls]<UL><LI><a href="#[b2e108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[b2e144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputInvert
<LI><a href="#[b2e1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[b2eb94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenEnable
<LI><a href="#[b2ec0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[b2ec48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenConfigure
<LI><a href="#[b2ec84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[b2ecfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[b32884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorPowers
<LI><a href="#[b32fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b32938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMotors
</UL>

<P><STRONG><a name="[b32398]"></a>InitializeServos</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, servo.obj(.text:InitializeServos))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = InitializeServos &rArr; GPIOPinTypePWM
</UL>
<BR>[Calls]<UL><LI><a href="#[b2eb94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenEnable
<LI><a href="#[b2ec0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[b2ec48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenConfigure
<LI><a href="#[b2ec84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[b2ecfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[b3235c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServoPosition
<LI><a href="#[b32fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b32410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initServo
</UL>

<P><STRONG><a name="[b2fc74]"></a>LSIntHandler</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, linesensor.obj(.text:LSIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = LSIntHandler &rArr; $C$L2 &rArr; StartChargingLS &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[b2c998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDischargingLS
<LI><a href="#[b2ca10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
<LI><a href="#[b2dd48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L3
<LI><a href="#[b2dd84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b2f6d4]"></a>LockoutProtection</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, init.obj(.text:LockoutProtection))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = LockoutProtection &rArr; GPIOPinTypeGPIOInput
</UL>
<BR>[Calls]<UL><LI><a href="#[b2c3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$DW$L$LockoutProtection$4$E
<LI><a href="#[b2ca4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[b2cb00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[b32fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b30d90]"></a>PresetEncoderCounts</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, encoder.obj(.text:PresetEncoderCounts))
<BR><BR>[Called By]<UL><LI><a href="#[b30e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoderDemo
</UL>

<P><STRONG><a name="[b2c9d4]"></a>ReadLS</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, linesensor.obj(.text:ReadLS))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadLS
</UL>
<BR>[Calls]<UL><LI><a href="#[b2ca4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b2dd84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L2
<LI><a href="#[b31984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLineSensor
</UL>

<P><STRONG><a name="[b31984]"></a>ReadLineSensor</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, linesensor.obj(.text:ReadLineSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = ReadLineSensor &rArr; StartChargingLS &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[b2c86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChargingLS
<LI><a href="#[b2c95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitUS
<LI><a href="#[b2c998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDischargingLS
<LI><a href="#[b2c9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLS
</UL>
<BR>[Called By]<UL><LI><a href="#[b319fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineSensorDemo
</UL>

<P><STRONG><a name="[b2e180]"></a>SetMotorPower</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, motor.obj(.text:SetMotorPower))
<BR><BR>[Calls]<UL><LI><a href="#[b2ecc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b32884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorPowers
</UL>

<P><STRONG><a name="[b32884]"></a>SetMotorPowers</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, motor.obj(.text:SetMotorPowers))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetMotorPowers
</UL>
<BR>[Calls]<UL><LI><a href="#[b2e180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorPower
</UL>
<BR>[Called By]<UL><LI><a href="#[b328c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeMotors
<LI><a href="#[b328fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorDemo
</UL>

<P><STRONG><a name="[b3235c]"></a>SetServoPosition</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, servo.obj(.text:SetServoPosition))
<BR><BR>[Calls]<UL><LI><a href="#[b2ecc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b32398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeServos
<LI><a href="#[b323d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servoDemo
</UL>

<P><STRONG><a name="[b2c86c]"></a>StartChargingLS</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, linesensor.obj(.text:StartChargingLS))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = StartChargingLS &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[b2e108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[b2e1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[b2dd84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L2
<LI><a href="#[b31984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLineSensor
</UL>

<P><STRONG><a name="[b2c998]"></a>StartDischargingLS</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, linesensor.obj(.text:StartDischargingLS))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = StartDischargingLS &rArr; GPIOPinTypeGPIOInput
</UL>
<BR>[Calls]<UL><LI><a href="#[b2cb00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>
<BR>[Called By]<UL><LI><a href="#[b2fc74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSIntHandler
<LI><a href="#[b31984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLineSensor
</UL>

<P><STRONG><a name="[b2c95c]"></a>WaitUS</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, timer.obj(.text:WaitUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = WaitUS
</UL>
<BR>[Calls]<UL><LI><a href="#[b2cb3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[b32fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[13e6ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L1
</UL>
<BR>[Called By]<UL><LI><a href="#[b31984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLineSensor
</UL>

<P><STRONG><a name="[b3145c]"></a>ADCIntStatus</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, adc.o(i.ADCIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b314d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getADCValue
</UL>

<P><STRONG><a name="[b31420]"></a>ADCProcessorTrigger</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adc.o(i.ADCProcessorTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[b314d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getADCValue
</UL>

<P><STRONG><a name="[b313e4]"></a>ADCSequenceConfigure</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, adc.o(i.ADCSequenceConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADCSequenceConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[b31510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initIRSensor
</UL>

<P><STRONG><a name="[b313a8]"></a>ADCSequenceDataGet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceDataGet))
<BR><BR>[Called By]<UL><LI><a href="#[b314d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getADCValue
</UL>

<P><STRONG><a name="[b3136c]"></a>ADCSequenceEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b31510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initIRSensor
</UL>

<P><STRONG><a name="[b31330]"></a>ADCSequenceStepConfigure</STRONG> (Thumb, 110 bytes, Stack size 4 bytes, adc.o(i.ADCSequenceStepConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADCSequenceStepConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[b31510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initIRSensor
</UL>

<P><STRONG><a name="[13f0014]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[b2cb00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[b2e1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[b2ecfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[b33004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
</UL>

<P><STRONG><a name="[b2a8c8]"></a>GPIOIntTypeSet</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntTypeSet))
<BR><BR>[Called By]<UL><LI><a href="#[b30dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeEncoders
</UL>

<P><STRONG><a name="[13eff60]"></a>GPIOPadConfigSet</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[b2cb00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[b2e1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[b2ecfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[b33004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
</UL>

<P><STRONG><a name="[b2a814]"></a>GPIOPinIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[b2b7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L14
</UL>

<P><STRONG><a name="[b2a88c]"></a>GPIOPinIntEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b30dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeEncoders
</UL>

<P><STRONG><a name="[b2a7d8]"></a>GPIOPinIntStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b2fcb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInterruptHandler
</UL>

<P><STRONG><a name="[b2ca4c]"></a>GPIOPinRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinRead))
<BR><BR>[Called By]<UL><LI><a href="#[b2b78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L15
<LI><a href="#[b2b7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L14
<LI><a href="#[b2c9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLS
<LI><a href="#[b2f6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockoutProtection
</UL>

<P><STRONG><a name="[b2cb00]"></a>GPIOPinTypeGPIOInput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOInput
</UL>
<BR>[Calls]<UL><LI><a href="#[13eff60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[13f0014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b2c998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDischargingLS
<LI><a href="#[b2f6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockoutProtection
<LI><a href="#[b30dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeEncoders
<LI><a href="#[b319c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeLineSensor
</UL>

<P><STRONG><a name="[b2e1bc]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[13eff60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[13f0014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b2c86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChargingLS
<LI><a href="#[b328c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeMotors
</UL>

<P><STRONG><a name="[b2ecfc]"></a>GPIOPinTypePWM</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypePWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypePWM
</UL>
<BR>[Calls]<UL><LI><a href="#[13eff60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[13f0014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b32398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeServos
<LI><a href="#[b328c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeMotors
</UL>

<P><STRONG><a name="[b33004]"></a>GPIOPinTypeUART</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeUART
</UL>
<BR>[Calls]<UL><LI><a href="#[13eff60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[13f0014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b33130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART
</UL>

<P><STRONG><a name="[b2e108]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[b2c86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChargingLS
<LI><a href="#[b328c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeMotors
</UL>

<P><STRONG><a name="[b2c830]"></a>IntEnable</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b30dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeEncoders
</UL>

<P><STRONG><a name="[b2cac4]"></a>IntMasterEnable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[13e5fc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeMCU
</UL>

<P><STRONG><a name="[b2ec48]"></a>PWMGenConfigure</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pwm.o(i.PWMGenConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[b32398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeServos
<LI><a href="#[b328c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeMotors
</UL>

<P><STRONG><a name="[b2eb94]"></a>PWMGenEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(i.PWMGenEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b32398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeServos
<LI><a href="#[b328c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeMotors
</UL>

<P><STRONG><a name="[b2ec0c]"></a>PWMGenPeriodSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(i.PWMGenPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[b32398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeServos
<LI><a href="#[b328c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeMotors
</UL>

<P><STRONG><a name="[b2e144]"></a>PWMOutputInvert</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(i.PWMOutputInvert))
<BR><BR>[Called By]<UL><LI><a href="#[b328c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeMotors
</UL>

<P><STRONG><a name="[b2ec84]"></a>PWMOutputState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(i.PWMOutputState))
<BR><BR>[Called By]<UL><LI><a href="#[b32398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeServos
<LI><a href="#[b328c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeMotors
</UL>

<P><STRONG><a name="[b2ecc0]"></a>PWMPulseWidthSet</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pwm.o(i.PWMPulseWidthSet))
<BR><BR>[Called By]<UL><LI><a href="#[b2e180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorPower
<LI><a href="#[b3235c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServoPosition
</UL>

<P><STRONG><a name="[b302c8]"></a>SysCtlClockGet</STRONG> (Thumb, 438 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeMCU
<LI><a href="#[b30340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioInitExpClk
</UL>

<P><STRONG><a name="[b2bde0]"></a>SysCtlClockSet</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[13eb85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeMCU
</UL>

<P><STRONG><a name="[b2bda4]"></a>SysCtlPWMClockSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPWMClockSet))
<BR><BR>[Called By]<UL><LI><a href="#[b2f710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeMCU
</UL>

<P><STRONG><a name="[b32fc8]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b2c95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitUS
<LI><a href="#[b2f6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockoutProtection
<LI><a href="#[b30340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioInitExpClk
<LI><a href="#[b30dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeEncoders
<LI><a href="#[b31510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initIRSensor
<LI><a href="#[b319c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeLineSensor
<LI><a href="#[b32398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeServos
<LI><a href="#[b328c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeMotors
<LI><a href="#[b33130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART
</UL>

<P><STRONG><a name="[b3028c]"></a>SysCtlPeripheralPresent</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralPresent))
<BR><BR>[Called By]<UL><LI><a href="#[b30340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioInitExpClk
</UL>

<P><STRONG><a name="[b2cb3c]"></a>TimerConfigure</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer.o(i.TimerConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[b2c95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitUS
</UL>

<P><STRONG><a name="[13e6474]"></a>TimerDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.TimerDisable), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13e699c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$DW$L$WaitUS$8$E
</UL>

<P><STRONG><a name="[b2ca88]"></a>TimerEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.TimerEnable))
<BR><BR>[Called By]<UL><LI><a href="#[13e6ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L1
</UL>

<P><STRONG><a name="[b2ca10]"></a>TimerIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.TimerIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[b2fc74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSIntHandler
</UL>

<P><STRONG><a name="[b2cbf0]"></a>TimerLoadSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerLoadSet))
<BR><BR>[Called By]<UL><LI><a href="#[b2dd48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L3
<LI><a href="#[13e6ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L1
</UL>

<P><STRONG><a name="[13e64ec]"></a>TimerValueGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.TimerValueGet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13e6a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$DW$L$WaitUS$7$B
</UL>

<P><STRONG><a name="[b30250]"></a>UARTCharGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UARTCharGet))
<BR><BR>[Calls]<UL><LI><a href="#[b30250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b30250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGet
<LI><a href="#[b32ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTgets
<LI><a href="#[b32f14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTgetc
</UL>

<P><STRONG><a name="[b30214]"></a>UARTCharPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UARTCharPut))
<BR><BR>[Calls]<UL><LI><a href="#[b30214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[b30214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[b30304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
<LI><a href="#[b32ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTgets
</UL>

<P><STRONG><a name="[b32f8c]"></a>UARTCharsAvail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTCharsAvail))
<BR><BR>[Called By]<UL><LI><a href="#[b33040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyWasPressed
</UL>

<P><STRONG><a name="[b301d8]"></a>UARTConfigSetExpClk</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, uart.o(i.UARTConfigSetExpClk))
<BR><BR>[Calls]<UL><LI><a href="#[b301d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[b301d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[b30340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioInitExpClk
</UL>

<P><STRONG><a name="[b3019c]"></a>UARTEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(i.UARTEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b30340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioInitExpClk
</UL>

<P><STRONG><a name="[147f270]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[147f234]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[147f1f8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b2ff08]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b2ff08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[b2ff08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b2fecc]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b2fecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[b2fecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b2fe90]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b2fe90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b2fe90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b2dd84]"></a>$C$L2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, linesensor.obj(.text:LSIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = $C$L2 &rArr; StartChargingLS &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[b2c86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChargingLS
<LI><a href="#[b2c9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLS
</UL>
<BR>[Called By]<UL><LI><a href="#[b2fc74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSIntHandler
</UL>

<P><STRONG><a name="[b2dd48]"></a>$C$L3</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, linesensor.obj(.text:LSIntHandler))
<BR><BR>[Calls]<UL><LI><a href="#[b2cbf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[b2dd0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L4
</UL>
<BR>[Called By]<UL><LI><a href="#[b2fc74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSIntHandler
</UL>

<P><STRONG><a name="[b2dd0c]"></a>$C$L4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, linesensor.obj(.text:LSIntHandler))
<BR><BR>[Called By]<UL><LI><a href="#[b2dd48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L3
</UL>

<P><STRONG><a name="[b2c470]"></a>$C$DW$L$LockoutProtection$4$B</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, init.obj(.text:LockoutProtection), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2c470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$DW$L$LockoutProtection$4$B
</UL>
<BR>[Called By]<UL><LI><a href="#[b2c470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$DW$L$LockoutProtection$4$B
</UL>

<P><STRONG><a name="[b2c3bc]"></a>$C$DW$L$LockoutProtection$4$E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, init.obj(.text:LockoutProtection))
<BR><BR>[Called By]<UL><LI><a href="#[b2f6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockoutProtection
</UL>

<P><STRONG><a name="[b2ba5c]"></a>$C$L3</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, encoder.obj(.text:InitializeEncoders))
<BR><BR>[Called By]<UL><LI><a href="#[b30dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeEncoders
</UL>

<P><STRONG><a name="[b2ba20]"></a>$C$L4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, encoder.obj(.text:InitializeEncoders))
<BR><BR>[Calls]<UL><LI><a href="#[b2b9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L6
<LI><a href="#[b2b9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L5
</UL>
<BR>[Called By]<UL><LI><a href="#[b30dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeEncoders
</UL>

<P><STRONG><a name="[b2b9e4]"></a>$C$L5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, encoder.obj(.text:InitializeEncoders))
<BR><BR>[Called By]<UL><LI><a href="#[b2ba20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L4
</UL>

<P><STRONG><a name="[b2b9a8]"></a>$C$L6</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, encoder.obj(.text:InitializeEncoders))
<BR><BR>[Called By]<UL><LI><a href="#[b2ba20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L4
</UL>

<P><STRONG><a name="[b2b96c]"></a>$C$L7</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, encoder.obj(.text:GetEncoderCount))
<BR><BR>[Calls]<UL><LI><a href="#[b2b8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L10
</UL>
<BR>[Called By]<UL><LI><a href="#[b30e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncoderCount
</UL>

<P><STRONG><a name="[b2b930]"></a>$C$L8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, encoder.obj(.text:GetEncoderCount))
<BR><BR>[Calls]<UL><LI><a href="#[b2b8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L10
</UL>
<BR>[Called By]<UL><LI><a href="#[b30e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncoderCount
</UL>

<P><STRONG><a name="[b2b8f4]"></a>$C$L9</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, encoder.obj(.text:GetEncoderCount))
<BR><BR>[Called By]<UL><LI><a href="#[b30e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncoderCount
</UL>

<P><STRONG><a name="[b2b8b8]"></a>$C$L10</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, encoder.obj(.text:GetEncoderCount))
<BR><BR>[Called By]<UL><LI><a href="#[b2b930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L8
<LI><a href="#[b2b96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L7
</UL>

<P><STRONG><a name="[b2b87c]"></a>$C$L11</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, encoder.obj(.text:EncoderInterruptHandler))
<BR><BR>[Calls]<UL><LI><a href="#[b2b7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L14
</UL>
<BR>[Called By]<UL><LI><a href="#[b2fcb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInterruptHandler
</UL>

<P><STRONG><a name="[b2b840]"></a>$C$L12</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, encoder.obj(.text:EncoderInterruptHandler))
<BR><BR>[Calls]<UL><LI><a href="#[b2b7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L14
</UL>
<BR>[Called By]<UL><LI><a href="#[b2fcb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInterruptHandler
</UL>

<P><STRONG><a name="[b2b804]"></a>$C$L13</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, encoder.obj(.text:EncoderInterruptHandler))
<BR><BR>[Called By]<UL><LI><a href="#[b2fcb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInterruptHandler
</UL>

<P><STRONG><a name="[b2b7c8]"></a>$C$L14</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, encoder.obj(.text:EncoderInterruptHandler))
<BR><BR>[Calls]<UL><LI><a href="#[b2a814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntClear
<LI><a href="#[b2b78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L15
<LI><a href="#[b2ca4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b2b840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L12
<LI><a href="#[b2b87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L11
<LI><a href="#[b2fcb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInterruptHandler
</UL>

<P><STRONG><a name="[b2b78c]"></a>$C$L15</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, encoder.obj(.text:EncoderInterruptHandler))
<BR><BR>[Calls]<UL><LI><a href="#[b2b750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L16
<LI><a href="#[b2ca4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b2b7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L14
</UL>

<P><STRONG><a name="[b2b750]"></a>$C$L16</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, encoder.obj(.text:EncoderInterruptHandler))
<BR><BR>[Calls]<UL><LI><a href="#[b2b69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L19
<LI><a href="#[b2b6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L18
<LI><a href="#[b2b714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L17
</UL>
<BR>[Called By]<UL><LI><a href="#[b2b78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L15
</UL>

<P><STRONG><a name="[b2b714]"></a>$C$L17</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, encoder.obj(.text:EncoderInterruptHandler))
<BR><BR>[Calls]<UL><LI><a href="#[b2b69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L19
</UL>
<BR>[Called By]<UL><LI><a href="#[b2b750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L16
</UL>

<P><STRONG><a name="[b2b6d8]"></a>$C$L18</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, encoder.obj(.text:EncoderInterruptHandler))
<BR><BR>[Called By]<UL><LI><a href="#[b2b750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L16
</UL>

<P><STRONG><a name="[b2b69c]"></a>$C$L19</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, encoder.obj(.text:EncoderInterruptHandler))
<BR><BR>[Called By]<UL><LI><a href="#[b2b714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L17
<LI><a href="#[b2b750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$L16
<LI><a href="#[b2fcb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInterruptHandler
</UL>

<P><STRONG><a name="[13e6ac8]"></a>$C$L1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, timer.obj(.text:WaitUS))
<BR><BR>[Calls]<UL><LI><a href="#[b2ca88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[b2cbf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b2c95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitUS
</UL>

<P><STRONG><a name="[13e6a8c]"></a>$C$DW$L$WaitUS$7$B</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, timer.obj(.text:WaitUS), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e64ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerValueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[13e69d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$DW$L$WaitUS$7$E
</UL>

<P><STRONG><a name="[13e69d8]"></a>$C$DW$L$WaitUS$7$E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, timer.obj(.text:WaitUS), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e6a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$C$DW$L$WaitUS$7$B
</UL>

<P><STRONG><a name="[13e699c]"></a>$C$DW$L$WaitUS$8$E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, timer.obj(.text:WaitUS), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e6474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDisable
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
